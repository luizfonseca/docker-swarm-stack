version: "3.6"


# docker network create --scope swarm --driver=overlay --attachable public
# docker network create --scope swarm --driver=overlay --attachable agent_network
# docker network create --scope swarm --driver overlay --attachable monitoring
# https://doc.traefik.io/traefik/routing/providers/docker/#configuration-examples

x-default-logging: &x-default-logging
  options:
    max-size: "12m"
    max-file: "5"
  driver: json-file

# The following network is to be appended to every
# service that needs to be exposed to the outside world
networks:
  public:
    external: true
  traefik-metrics:
    external: true

configs: 
  acme.json:
    file: ./configs/acme.json

services:
  traefik:
    # Beware: traefik:v3 will have different properties
    image: "traefik:v2.10.5" 
    command:
      # Access logging
      - --accesslog=true
      - --accesslog.format=json

      # Default entrypoints (HTTP/HTTPs)
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entryPoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.http.tls.certresolver=leresolver
      
      # Swarm configuration
      - --providers.docker=true
      - --providers.docker.swarmmode=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=public

      # Disable tracking
      - --global.sendanonymoususage=false

      # Traefik API
      - --api=false
      - --api.dashboard=false
      - --log.level=INFO

      # HTTP
      - --providers.docker.httpclienttimeout=60

      # TLS
      - --certificatesresolvers.leresolver.acme.httpchallenge=true
      - --certificatesresolvers.leresolver.acme.email=email@sample-email-doesnt-exist1.me #Set your email address here, is for the generation of SSL certificates with Let's Encrypt. 
      - --certificatesresolvers.leresolver.acme.storage=./acme.json
      - --certificatesresolvers.leresolver.acme.httpchallenge.entrypoint=web
      # Uncomment the following line if you don't want to use the staging Let's Encrypt server before using the production one.
      - --certificatesresolvers.leresolver.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory

      # Metrics
      - --metrics.prometheus=true
      - --metrics.prometheus.entryPoint=metrics
      - --entryPoints.metrics.address=:8082
      - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0

      # Plugins
      - --experimental.localPlugins.gh-oauth.modulename=github.com/luizfonseca/traefik-github-oauth-plugin
      # - --experimental.plugins.gh-oauth.version=v0.6.0

      # Tracing
      - --tracing.zipkin=true
      - --tracing.zipkin.httpendpoint=http://tasks.tempo:9411/api/v2/spans
      # - --tracing.jaeger.collector.endpoint=http://tasks.tempo:14268
      # - --tracing.jaeger.tracecontextheadername=traefik-trace-id
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        # Makes traefik accessible from outside the swarm
        - "traefik.enable=false"
        # - "traefik.docker.lbswarm=true" # Load balances through the swarm 
        # - "traefik.http.routers.traefik.rule=Host(`traefik.local.tld`)"
        # - "traefik.http.routers.traefik.service=api@internal"
        # - "traefik.http.services.traefik.loadbalancer.server.port=8080"


        # Middleware redirect

        # # Ensure traefik is protected by basic auth
        # - "traefik.http.routers.traefik.middlewares=authtraefik"
        # - "traefik.http.middlewares.authtraefik.basicauth.users=admin:password" # user/password
    networks:
      - public
      - traefik-metrics
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ./configs/acme.json:/acme.json"
      - ./plugins-local:/plugins-local
    logging: *x-default-logging

  
  gh-oauth:
    image: luizfonseca/traefik-github-oauth-server:0.6.0
    environment:
      GITHUB_OAUTH_CLIENT_ID: "${GITHUB_OAUTH_CLIENT_ID:-notSet}"
      GITHUB_OAUTH_CLIENT_SECRET: "${GITHUB_OAUTH_CLIENT_SECRET:-notSet}"
      API_BASE_URL: "https://gh-oauth.${DOMAIN_NAME:?err}"
    networks:
      - public
    deploy:
      replicas: 1
      labels:
        - "traefik.enable=true"
        - "traefik.http.services.oauth-proxy.loadbalancer.server.port=80"
        - "traefik.http.routers.oauth-proxy.rule=Host(`gh-oauth.${DOMAIN_NAME:?err}`)"
    logging: *x-default-logging