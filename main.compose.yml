version: "3.8"

x-default-logging: &x-default-logging
  options:
    max-size: "12m"
    max-file: "5"
  driver: json-file

# The following network is to be appended to every
# service that needs to be exposed to the outside world
networks:
  public:
    external: true
  shared:
    external: true

volumes:
  caddy_data: {}
  caddy_pg_data: {}

services:
  minio:
    image: minio/minio:latest
    # restart: always
    entrypoint: sh
    command: -c 'mkdir -p /data/caddy && /usr/bin/minio server /data --console-address ":9001"'
    environment:
      # change once logged in
      MINIO_ROOT_USER: cluster-str
      MINIO_ROOT_PASSWORD: cluster-secret
    networks:
      - shared
      - public
    volumes:
      - type: bind
        source: ${HOME}/minio/data
        target: /data
    deploy:
      replicas: 1
      labels:
        caddy: "minio${DOMAIN_PREFIX}.${DOMAIN_NAME:-localhost}"
        caddy.reverse_proxy: "{{ upstreams 9001 }}"
        caddy.authorize: with ghpolicy
      placement:
        constraints:
          - node.role == manager

  caddy:
    image: luizfonseca/caddy-proxy-with-plugins:v1.0.2
    environment:
      - CADDY_INGRESS_NETWORKS=public
    ports:
      - 80:80
      - 443:443
    networks:
      - public
      - shared
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "0.5"
          memory: 64M
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - caddy_data:/data
    labels:
      # Set Storage definitions
      caddy_0.storage: s3
      caddy_0.storage.host: minio:9000
      caddy_0.storage.bucket: caddy
      caddy_0.storage.prefix: ssl
      caddy_0.storage.access_id: cluster-str
      caddy_0.storage.secret_key: cluster-secret
      caddy_0.storage.insecure: "true"


      caddy_1.servers.metrics: ""
      # auth portal using github https://github.com/authcrunch/authcrunch.github.io/blob/c6d02968980595021863c223369f9f6cb31992b6/assets/conf/oauth/github/Caddyfile
      caddy_2.order: authenticate before respond
      caddy_2.order_0: authorize before basicauth

      caddy_2.security.oauth: identity provider github ${GITHUB_OAUTH_CLIENT_ID:-notSet} ${GITHUB_OAUTH_CLIENT_SECRET:-notSet}
      caddy_2.security.authentication: portal github_oauth

      caddy_2.security.authentication.crypto: key sign-verify ${GITHUB_MIDDLEWARE_JWT_SECRET_KEY:-notSet}
      caddy_2.security.authentication.cookie: domain ${DOMAIN_NAME:?err}
      caddy_2.security.authentication.cookie_0: samesite strict
      caddy_2.security.authentication.enable: identity provider github
      caddy_2.security.authentication.transform: user
      caddy_2.security.authentication.transform.match: realm github
      caddy_2.security.authentication.transform.action: add role authp/visitor
      caddy_2.security.authentication.transform_0: user
      caddy_2.security.authentication.transform_0.match: sub github.com/${GITHUB_USERNAME:?err}
      caddy_2.security.authentication.transform_0.action: add role authp/admin

      caddy_2.security.authorization: policy ghpolicy
      caddy_2.security.authorization.set: auth url https://gh-oauth${DOMAIN_SUFFIX}.${DOMAIN_NAME:?err}/oauth2/github
      caddy_2.security.authorization.set_0: token sources cookie
      caddy_2.security.authorization.crypto: key verify ${GITHUB_MIDDLEWARE_JWT_SECRET_KEY:-notSet}
      caddy_2.security.authorization.allow: roles authp/admin
      # caddy_2.security.authorization.validate: header bearer
      # caddy_2.security.authorization.inject: header with claims

      # creates an auth to hold the portal authentication
      caddy_4: gh-oauth${DOMAIN_SUFFIX}.${DOMAIN_NAME:?err}
      caddy_4.authenticate: with github_oauth
    logging: *x-default-logging
